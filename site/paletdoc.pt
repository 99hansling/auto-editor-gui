(define (code val) (hash "tag" "code" "val" val))

(define (text children ...) (hash "tag" "text" "children" children))
(define/c (link [val symbol?]) (hash "tag" "link" "val" (symbol->string val)))

(define (proc name sig summary)
    (hash "tag" "proc" "name" name "sig" sig "summary" summary)
)
(define (pred name summary) (hash "tag" "pred" "name" name "summary" summary))

(define (syntax name body summary)
    (hash "tag" "syntax" "name" name "body" body "summary" summary)
)

(define (value name sig summary)
    (hash "tag" "value" "name" name "sig" sig "summary" summary)
)

(define doc {hash
    "Assignment" #[
        (syntax "define" "id expr" (text "Set " 'id " to the result of " 'expr "."))
        (syntax "set!" "id expr"
            (text
                "Set " 'id " to the result of " 'expr " if " 'id
                " is already defined. If " 'id " is not defined, raise an error."
            )
        )
        (syntax
            "lambda" "args body"
            (text
                "Produces a procedure that accepts " 'args " arguments and runs "
                'body " when called."
            )
        )
        (syntax "Î»" "args body" (text "Clone of " (link 'lambda) "."))
        (syntax
            "define/c" "(proc-bind [id-binding contract]... )"
            (text "Define a procedure with contracts.")
        )
    ]
    "Control Flow" #[
        (syntax
            "if" "test-expr then-expr else-expr"
            (text
                "Evaluates " 'test-expr ". If " #t " then evaluate "
                'then-expr " else evaluate " 'else-expr
                ". An error will be raised if evaluated "
                'test-expr " is not a " (link 'bool?) "."
            )
        )
        (syntax
            "when" "test-expr body"
            (text
                "Evaluates " 'test-expr ". If " #t " then evaluate "
                'body " else do nothing. An error will be raised if evaluated "
                'test-expr " is not a " (link 'bool?) "."
            )
        )
        (syntax
            "for"
            "([id seq-expr] ...) body"
            (text
                "Loop over " 'seq-expr " by setting the variable " 'id
                " to the nth item of " 'seq-expr " and evaluating " 'body "."
            )
        )
    ]
    "Equality" #[
        (proc
            "equal?"
            #(#("v1" "any") #("v2" "any") "bool?")
            (text
                "Returns " #t " if " 'v1 " and " 'v2
                " are the same type and have the same value, " #f " otherwise."
            )
        )
        (proc
            "eq?"
            #(#("v1" "any") #("v2" "any") "bool?")
            (text
                "Returns " #t " if " 'v1 " and " 'v2
                " refer to the same object in memory, " #f " otherwise."
            )
        )
    ]
    "Booleans" #[
        (pred
            "bool?"
            (text "Returns " #t " if " 'v " is " #t " or " #f ", " #f " otherwise.")
        )
        (value "true" "bool?" (text "An alias for " #t "."))
        (value "false" "bool?" (text "An alias for " #f "."))
    ]
    "Number Predicates" #[
        (pred
            "number?"
            (text "Returns " #t " if " 'v " is a number, " #f " otherwise.")
        )
        (pred
            "real?"
            (text "Returns " #t " if " 'v " is a real number, " #f " otherwise.")
        )
        (pred
            "int?"
            (text "Returns " #t " if " 'v " is an integer, " #f " otherwise.")
        )
        (pred
            "uint?"
            (text
                "Returns " #t " if " 'v " is an integer and " 'v " is greater than -1, "
                #f " otherwise."
            )
        )
        (pred
            "nat?"
            (text
                "Returns " #t " if " 'v " is an integer and " 'v " is greater than 0, "
                #f " otherwise."
            )
        )
        (pred "float?" (text "Returns " #t " if " 'v " is a float, " #f " otherwise."))
        (pred
            "threshold?"
            (text
                "Returns " #t " if " 'v " is a float and " 'v " is >= 0 and <= 1, "
                #f " otherwise."
            )
        )
        (pred
            "frac?"
            (text
                "Returns " #t " if " 'v " is a fraction (a rational number), "
                #f " otherwise."
            )
        )
        (proc "zero?" #(#("z" "number?") "bool?") (text "Returns " (code "(= z 0)")))
        (proc
            "positive?"
            #(#("x" "real?") "bool?")
            (text "Returns " (code "(> x 0)"))
        )
        (proc
            "negative?"
            #(#("x" "real?") "bool?")
            (text "Returns " (code "(< x 0)"))
        )
        (proc
            "even?"
            #(#("n" "int?") "bool?")
            (text "Returns " (code "(zero? (mod n 2))"))
        )
        (proc
            "odd?"
            #(#("n" "int?") "bool?")
            (text "Returns " (code "(not (even? n))"))
        )
    ]
    "Numbers" #[
        (proc
            "+"
            #(#("z" "number?") "..." "number?")
            (text
                "Return the sum of " 'z "s. Add from left to right. "
                "If no arguments are provided the result is 0."
            )
        )
        (proc
            "-"
            #(#("z" "number?") #("w" "number?") "..." "number?")
            (text
                "When no " 'w "s are applied return " (code "(- 0 z)")
                ", otherwise return the subtraction of " 'w "s of " 'z "."
            )
        )
        (proc
            "*"
            #(#("z" "number?") "..." "number?")
            (text
                "Return the product of " 'z "s. If no " 'z
                "s are supplied the result is 1."
            )
        )
        (proc
            "/"
            #(#("z" "number?") #("w" "number?") "..." "number?")
            (text
                "Returns the division of " 'z " by the " 'w
                "s. If no " 'w "s are given, returns " (code "(/ 1 z)") "."
            )
        )
        (proc
            "div"
            #(#("n" "int?") #("m" "int?") "..." "int?")
            (text "Returns the integer division of " 'n " by the " 'm "s.")
        )
        (proc
            "mod"
            #(#("n" "int?") #("m" "int?") "int?")
            (text "Return the modulo of " 'n " and " 'm ".")
        )
        (proc
            "modulo"
            #(#("n" "int?") #("m" "int?") "int?")
            (text "Clone of " (link 'mod) ".")
        )
        (proc
            "add1"
            #(#("z" "number?") "number?")
            (text "Returns " (code "(+ z 1)") ".")
        )
        (proc
            "sub1"
            #(#("z" "number?") "number?")
            (text "Returns " (code "(- z 1)") ".")
        )
        (proc
            "="
            #(#("z" "number?") #("w" "number?") "..." "bool?")
            (text
                "Returns " #t " if all arguments are numerically equal, "
                #f " otherwise."
            )
        )
        (proc
            "<"
            #(#("x" "real?") #("y" "real?") "bool?")
            (text "Returns " #t " if " 'x " is less than " 'y ", " #f " otherwise.")
        )
        (proc
            "<="
            #(#("x" "real?") #("y" "real?") "bool?")
            (text
                "Returns " #t " if " 'x " is less than or equal to "
                'y ", " #f " otherwise."
            )
        )
        (proc
            ">"
            #(#("x" "real?") #("y" "real?") "bool?")
            (text "Returns " #t " if " 'x " is greater than " 'y ", " #f " otherwise.")
        )
        (proc
            ">="
            #(#("x" "real?") #("y" "real?") "bool?")
            (text
                "Returns " #t " if " 'x " is greater than or equal to " 'y ", " #f
                " otherwise."
            )
        )
        (proc
            "abs"
            #(#("x" "real?") "real?")
            (text "Returns the absolute value of " 'x ".")
        )
        (proc
            "max"
            #(#("x" "real?") "..." "real?")
            (text "Returns largest value of the " 'x "s.")
        )
        (proc
            "min"
            #(#("x" "real?") "..." "real?")
            (text "Returns smallest value of the " 'x "s.")
        )
        (proc
            "real-part"
            #(#("z" "number?") "real?")
            (text "Returns the real part of " 'z ".")
        )
        (proc
            "imag-part"
            #(#("z" "number?") "real?")
            (text "Returns the imaginary part of " 'z ".")
        )
        (proc
            "round"
            #(#("x" "real?") "int?")
            (text
                "Returns the closest integer to " 'x
                " resolving ties in favor of even numbers."
            )
        )
        (proc
            "ceil"
            #(#("x" "real?") "int?")
            (text "Returns the smallest integer bigger than " 'x ".")
        )
        (proc
            "floor"
            #(#("x" "real?") "int?")
            (text "Returns the largest integer less than " 'x ".")
        )
    ]
    "Exponents" #[
        (proc
            "pow"
            #(#("z" "real?") #("w" "real?") "real?")
            (text "Returns " 'z " raised to the " 'w " power.")
        )
        (proc
            "sqrt"
            #(#("z" "number?") "number?")
            (text "Returns the square root of " 'z ".")
        )
        (proc
            "exp"
            #(#("x" "real?") "float?")
            (text "Returns Euler's number raised to the " 'x " power.")
        )
        (proc
            "log"
            #(#("x" "real?") #("b" "real?" "(exp 1)") "float?")
            (text
                "Returns the natural logarithm of " 'x ".\n"
                "If " 'b " is provided it serves as an alternative base."
            )
        )
    ]
    "Geometry" #[
        (proc
            "sin"
            #(#("z" "real?") "float?")
            (text "Returns the sine of " 'z " in radians.")
        )
        (proc
            "cos"
            #(#("z" "real?") "float?")
            (text "Returns the cosine of " 'z " in radians.")
        )
        (proc
            "tan"
            #(#("z" "real?") "float?")
            (text "Returns the tangent of " 'z " in radians.")
        )
    ]
    "Symbols" #[
        (pred
            "symbol?"
            (text "Returns " #t " if " 'v " is a symbol, " #f " otherwise.")
        )
        (proc
            "symbol->string"
            #(#("sym" "symbol?") "string?")
            (text "Returns a new string whose characters are the same as in " 'sym ".")
        )
        (proc
            "string->symbol"
            #(#("str" "string?") "symbol?")
            (text "Returns a symbol whose characters are the same as " 'str ".")
        )
    ]
    "Strings" #[
        (pred
            "string?"
            (text "Returns " #t " if " 'v " is a string, " #f " otherwise.")
        )
        (pred
            "char?"
            (text "Returns " #t " if " 'v " is a char, " #f " otherwise.")
        )
        (proc
            "string"
            #(#("char" "char?") "..." "string?")
            (text "Returns a new string from the given " 'char "s.")
        )
        (proc
            "string-append"
            #(#("str" "string?") "..." "string?")
            (text "Returns a new string concatenated from the given " 'str "s")
        )
        (proc
            "char->int"
            #(#("char" "char?") "int?")
            (text "Returns the corresponding int to the given " 'char ".")
        )
        (proc
            "int->char"
            #(#("k" "int?") "char?")
            (text "Returns the character corresponding to " 'k ".")
        )
        (proc
            "number->string"
            #(#("z" "number?") "string?")
            (text "Returns " 'z " as a string.")
        )
        (proc
            "~a"
            #(#("v" "datum?") "..." "string?")
            (text
                "Converts all " 'v "s to a string using display with \"\" as the joiner."
            )
        )
        (proc
            "~s"
            #(#("v" "datum?") "..." "string?")
            (text
                "Converts all " 'v "s to a string using display with \" \" as the joiner."
            )
        )
        (proc
            "~v"
            #(#("v" "datum?") "..." "string?")
            (text
                "Converts all " 'v " to a string using print with \" \" as the joiner."
            )
        )
    ]
    "Vectors" #[
        (pred
            "vector?"
            (text "Returns " #t " if " 'v " is a vector, " #f " otherwise.")
        )
        (proc
            "vector"
            #(#("v" "any") "..." "vector?")
            (text
                "Returns a new vector with the " 'v " args filled with its slots in order."
            )
        )
        (proc
            "make-vector"
            #(#("size" "uint?") #("v" "any" "0") "vector?")
            (text
                "Returns a new vector with " 'size " slots all filled with " 'v "s."
            )
        )
        (proc
            "vector-pop!"
            #(#("vec" "vector?") "any")
            (text "Remove the last element of " 'vec " and return it.")
        )
        (proc
            "vector-add!"
            #(#("vec" "vector?") #("v" "any") "none")
            (text "Append " 'v " to the end of " 'vec ".")
        )
        (proc
            "vector-set!"
            #(#("vec" "vector?") #("pos" "int?") #("v" "any") "none")
            (text "Set slot " 'pos " of " 'vec " to " 'v ".")
        )
        (proc
            "vector-append"
            #(#("vec" "vector?") "..." "vector?")
            (text
                "Returns a new vector with all elements of " 'vec "s appended in order."
            )
        )
        (proc
            "vector-extend!"
            #(#("vec" "vector?") #("vec2" "vector?") "..." "none")
            (text
                "Modify " 'vec " so that all elements of " 'vec2
                "s are appended to the end of " 'vec " in order."
            )
        )
        (proc
            "string->vector"
            #(#("str" "string?") "vector?")
            (text "Returns a new string filled with the characters of " 'str ".")
        )
    ]
    "Arrays" #[
        (pred
            "array?"
            (text "Returns " #t " if " 'v " is an array, " #f " otherwise.")
        )
        (proc
            "array"
            #(#("dtype" "symbol?") #("v" "any") "..." "array?")
            (text
                "Returns a freshly allocated array with " 'dtype
                " as its datatype and the " 'v " args as its values filled in order."
            )
        )
        (proc
            "make-array"
            #(
                #("dtype" "symbol?")
                #("size" "uint?")
                #("v" "int?" "0")
            "array?")
            (text
                "Returns a freshly allocated array with " 'dtype
                " as its datatype and the value " 'v " filled."
            )
        )
        (proc
            "array-copy" #(#("arr" "array?") "array?")
            (text "Returns a new copy of " 'arr ".")
        )
        (proc
            "array-splice!"
            #(
                #("arr" "array?")
                #("v" "real?")
                #("start" "int?" "0")
                #("stop" "int?" "(len arr)")
            "array?")
            (text
                "Modify " 'arr " by setting " 'start " to " 'stop " into the value " 'v "."
            )
        )
        (proc
            "count-nonzero"
            #(#("arr" "array?") "uint?")
            (text "Returns the number of non-zeros in " 'arr ".")
        )
        (pred
            "bool-array?"
            (text
                "Returns " #t " if " 'v
                " is an array with 'bool as its datatype, " #f " otherwise."
            )
        )
        (proc
            "bool-array"
            #(#("v" "uint?") "..." "bool-array?")
            (text "Returns a new boolean array with " 'v " as its values.")
        )
        (proc
            "margin"
            #(
                #("left" "int?")
                #("right" "int?" "left")
                #("arr" "bool-array?")
                "bool-array?"
            )
            (text
                "Returns a new " (link 'bool-array?) " with " 'left " and " 'right
                " margin applied."
            )
        )
        (syntax
            "and" "first-expr rest-expr ..."
            (text
                "Evaluate " 'first-expr " if the result is a " (link 'bool-array?)
                " evaluate all " 'rest-expr "s and return the logical-and of all arrays."
                " If the result is " #f " evaluate " 'rest-expr
                " one at a time. Return immediately if any arg is " #f
                ", return " #t " if all values are " #t "."
            )
        )
        (syntax
            "or" "first-expr rest-expr ..."
            (text
                "Evaluate " 'first-expr " if the result is a " (link 'bool-array?)
                " evaluate all " 'rest-expr "s and return the logical-and of all arrays."
                " If the result is " #t " evaluate " 'rest-expr
                " one at a time. Return immediately if any arg is " #t
                ", return " #f " if all values are " #f "."
            )
        )
        (proc
            "xor"
            #(
                #("expr1" "(or/c bool? bool-array?)")
                #("expr2" "(or/c bool? bool-array?)")
                "(or/c bool? bool-array?)"
            )
            (text
                "Returns a new boolean or boolean-array based on the exclusive-or of "
                'expr1 " and " 'expr2 ". " 'expr2
                " must be the same type as " 'expr1 "."
            )
        )
        (proc
            "not"
            #(#("h" "(or/c bool? bool-array?)") "(or/c bool? bool-array?)")
            (text "Returns the inverse of " 'h ".")
        )
        (proc
            "mincut"
            #(#("arr" "bool-array?") #("x" "uint?") "bool-array?")
            (text
                "Turn all 0 runs that are less than " 'x " in length to 1s. "
                "0s represent cuts, 1s represent clips."
            )
        )
        (proc
            "minclip"
            #(#("arr" "bool-array?") #("x" "uint?") "bool-array?")
            (text "Turn all 1 runs that are less than " 'x " in length to 0s")
        )
        (proc
            "maxcut"
            #(#("arr" "bool-array?") #("x" "uint?") "bool-array?")
            (text "Turn all 0 runs that are greater than " 'x " in length to 1s")
        )
        (proc
            "maxclip"
            #(#("arr" "bool-array?") #("x" "uint?") "bool-array?")
            (text "Turn all 1 runs that are more than " 'x " in length to 0s")
        )
        (value "all" "'all" (text
            "The symbol 'all. Exists for backwards compatibility for older auto-editor versions"
        ))
    ]
    "Ranges" #[
        (pred
            "range?"
            (text "Returns " #t " if " 'v " is a range object, " #f " otherwise.")
        )
        (proc
            "range"
            #(
                #("start" "int?")
                #("stop" "int?")
                #("step" "(and/c int? (not/c 0))" "1")
             "range?")
            (text "Returns a range object.")
        )
        (proc
            "range->vector"
            #(#("rng" "range?") "vector?")
            (text "Returns a new vector based on " 'rng ".")
        )
    ]
    "Generic Sequences" #[
        (pred
            "iterable?"
            (text
                "Returns " #t " if " 'v " is a vector array string bytes hash pair or range, "
                #f " otherwise."
            )
        )
        (pred
            "sequence?"
            (text
                "Returns " #t " if " 'v " is a vector array string bytes pair or range, "
                #f " otherwise."
            )
        )
        (proc
            "len"
            #(#("seq" "iterable?") "uint?")
            (text "Returns the length of " 'seq ".")
        )
        (proc
            "ref"
            #(#("seq" "iterable?") #("pos" "int?") "any")
            (text
                "Returns the element of " 'seq " at position " 'pos
                " where the first element is at position 0. For sequences other than "
                (link 'pair?) ", negative positions are allowed."
            )
        )
        (proc
            "slice"
            #(
                #("seq" "sequence?")
                #("start" "int?")
                #("stop" "int?" "(len seq)")
                #("step" "int?" "1")
                "sequence?"
            )
            (text
                "Returns the elements of " 'seq " from " 'start " inclusively to "
                'stop " exclusively. If " 'step " is negative then " 'stop
                " is inclusive and " 'start " is exclusive."
            )
        )
        (proc
            "reverse"
            #(#("seq" "sequence?") "sequence?")
            (text "Returns " 'seq " in reverse order.")
        )
    ]
    "Hashmaps" #[
        (pred
            "hash?"
            (text "Returns " #t " if " 'v " is a hash table, " #f " otherwise.")
        )
        (proc
            "hash"
            #(#("key" "any") #("val" "any") "..." "hash?")
            (text "Returns a newly constructed hash map from key-value pairs.")
        )
        (proc
            "has-key?"
            #(#("hash" "hash?") #("key" "any") "bool?")
            (text "Returns " #t " if " 'key " is in the hash map, " #f " otherwise.")
        )
    ]
    "Actions" #[
        (proc
            "begin"
            #(#("datum" "any") "..." "any")
            (text "Evaluates all arguments and returns the last one.")
        )
        (proc
            "assert"
            #(#("expr" "any") #("msg" "(or/c string? #f)" "#f") "void?")
            (text "Raises error if " 'expr " is not " #t ".")
        )
        (proc
            "display"
            #(#("datum" "any") "void?")
            (text "Display " 'datum " to stdout.")
        )
        (proc
            "displayln"
            #(#("datum" "any") "void?")
            (text "Display " 'datum " to stdout with a newline character.")
        )
        (proc
            "print"
            #(#("datum" "any") "void?")
            (text "Display " 'datum " like REPL does.")
        )
        (proc
            "println"
            #(#("datum" "any") "void?")
            (text "Display " 'datum " like REPL does with a newline character.")
        )
    ]
    "Void" #[
        (pred
            "void?"
            (text "Returns " #t " if " 'v " is " (void) ", " #f " otherwise.")
        )
        (proc
            "void"
            #(#("v" "any") "..." "void?")
            (text  "Returns the constant " (void) ". All " 'v " arguments are ignored.")
        )
    ]
    "Procedures" #[
        (pred
            "procedure?"
            (text "Returns " #t " if " 'v " is a procedure, " #f " otherwise.")
        )
        (pred
            "contract?"
            (text
                "Returns " #t " if " 'v " is a contract, " #f " otherwise. "
                "A contract is either a " (link 'bool?) ", " (link 'number?)  ", "
                (link 'string?) ", " (link 'symbol?) ", or a predicate."
            )
        )
        (pred "any" (text "Always returns " #t " regardless of the value of " 'v "."))
        (proc
            "map"
            #(#("proc" "procedure?") #("seq" "sequence?") "sequence?")
            (text
                "Returns a new sequence with the results of " 'proc
                " applied to each element."
            )
        )
        (proc
            "apply"
            #(#("proc" "procedure?") #("seq" "sequence?") "any")
            (text "Applies " 'proc " given " 'seq " as its arguments.")
        )
        (proc
            "and/c"
            #(#("contract" "contract?") "contract?")
            (text
                "Takes any number of contracts and returns a contract predicate that "
                "accepts any values that satisfies all contracts."
            )
        )
        (proc
            "or/c"
            #(#("contract" "contract?") "contract?")
            (text
                "Takes any number of contracts and returns a contract predicate that "
                "accepts any values that can satisfy one or more contracts."
            )
        )
        (proc
            "not/c"
            #(#("contract" "contract?") "contract?")
            (text
                "Takes one contract and returns a contract that accepts one value and "
                "satisfies the opposite of the given contract."
            )
        )
        (proc
            ">=/c"
            #(#("n" "real?") "contract?")
            (text
                "Returns a new contract that requires the input to be " (link 'real?)
                " and " (link '>=) " than " 'n "."
            )
        )
        (proc
            ">/c"
            #(#("n" "real?") "contract?")
            (text "Like " (link '>=/c) " but for " (link '>) ".")
        )
        (proc
            "<=/c"
            #(#("n" "real?") "contract?")
            (text "Like " (link '>=/c) " but for " (link '<=) ".")
        )
        (proc
            "</c"
            #(#("n" "real?") "contract?")
            (text "Like " (link '>=/c) " but for " (link '<) ".")
        )
        (proc
            "between/c"
            #(#("n" "real?") #("m" "real?") "contract?")
            (text
                "Returns a contract that requires the input a real number between " 'n
                " and " 'm " or equal to one of them."
            )
        )
    ]
    "Objects" #[
        (pred
            "object?"
            (text "Returns " #t " if " 'v " is an object, " #f
                " otherwise. Anything that's not an object is a primitive."
            )
        )
        (proc
            "attrs"
            #(#("obj" "object?") "vector?")
            (text "Returns all attributes of " 'obj " as a vector of strings.")
        )
        (syntax "@r" "obj attr" (text "Returns the specified attribute on the object."))
    ]
    "Reflection" #[
        (syntax
            "quote" "body"
            (text
                "Returns " 'body " as its \"literalized\" form, "
                "a constant value with its binding names copied."
            )
        )
    ]
})
